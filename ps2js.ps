% javascript conversion shit

/join { % string join! [(string) (array)] (.) join (joined.array)
	exch
	[ exch { 3 -1 roll dup } forall pop pop]
	dup 0 exch { length add } forall string 
	dup 3 -1 roll
	0 exch { 
		dup length
		4 1 roll
		exch dup 4 1 roll exch
		putinterval
		add
		exch dup 3 -1 roll
	} forall
	pop
	pop
} def


/unary {
	counttomark 2 add -1 roll ps2js
	% operator is already on stack
} def

/binary {
	counttomark 3 add -1 roll ps2js
	exch % operator
	counttomark 2 add -1 roll ps2js
} def

/trinary {
	counttomark 4 add -1 roll ps2js
	3 -1 roll % operator
	counttomark 3 add -1 roll ps2js
	4 -1 roll % operator
	counttomark 2 add -1 roll ps2js
} def

/function {
	(\() exch
	counttomark
	[ exch
	counttomark add
	3 -1 roll dup
	3 -1 roll add
	exch neg roll
	] (, ) join
	(\))
} def

/attribute {
	counttomark 2 add -1 roll
	ps2js
	exch
} def

/operators <<
	/mul { ( * ) binary }
	/add { ( + ) binary }
	/sub { ( - ) binary }
	/eq  { ( == ) binary }
	/or  { ( || ) binary }
	/ifelse  { ( ? ) ( : ) trinary }
	/value= { (event.target.value = ) unary }
	/this.getField { (this.getField) 1 function }
	/min  { (Math.min) 2 function }
	/max  { (Math.max) 2 function }
	/cvi { (Number) 1 function }
	/.value { (.value) attribute }
	/event.target { (event.target) }
	/.name { (.name) attribute }
>> def

% This might be better as a big lookup table
/ps2js {
	dup type /arraytype eq {
		dup xcheck {
			{ dup operators exch known {
				% this is where the magic happens
				[ 
					(\()
					3 -1 roll operators exch get exec 
					(\))
				] () join cvx
			} {
				ps2js
			} ifelse } forall
		} {
		} ifelse
	} {
	dup type /nametype eq {
		dup xcheck {
			bigdict exch exec get unroll (.) join
			ps2js
		} {
			dup length string cvs ps2js
		} ifelse
		[ operators /this.getField get exec ] () join cvx
		[ operators /.value get exec ] () join cvx
	} {
	dup type /integertype eq {
		10 string cvs
	} {
	dup type /stringtype eq {
		dup xcheck {
			% tagged string, already processed
		} {
			[ (") 3 -1 roll (") ] () join
		} ifelse
	} {
	dup type /nulltype eq {
		pop (null) cvx
	} {
		type
		pstack quit
		type /typecheck signalerror
	} ifelse
	} ifelse
	} ifelse
	} ifelse
	} ifelse
	cvx
} def
