% javascript conversion shit
/operators <<
  /mul ( * )
  /add ( + )
  /eq ( == )
>> def


/getField {
	exch
	(this.getField\(') pushstr
	exch pushstr
	('\).value) pushstr
} def

/normalize { % returns a string
	dup operators exch known {
		operators exch get pushstr
	} {
	dup type /nametype eq {
		bigdict exch exec get unroll (.) join
		getField
	} {
	dup type /arraytype eq {
		0 get dup length string cvs
		getField
	} {
	dup type /integertype eq {
		exch dup 3 1 roll cvs length restinterval
	} {
	dup type /stringtype eq {
		exch
		(") pushstr
		exch pushstr
		(") pushstr
	} { 
		(ps2js) /typecheck signalerror
	}
	ifelse
	} ifelse
	} ifelse
	} ifelse
	} ifelse
} def

/restinterval { % str start restinterval (substr to end)
	exch
	dup length
	3 -1 roll dup
	3 1 roll sub
	getinterval
} def

/pushstr { % buf newstr pushstr shiftbuf
	dup length
	3 -1 roll dup
	4 -1 roll
	0 exch putinterval
	exch restinterval
} def

/ps2js { % {code} ps2js (javascript code)
  {
		dup operators exch known {
		3 -1 roll
		1000 string dup % hope
		(\() pushstr
		3 -1 roll normalize
		3 -1 roll normalize
		3 -1 roll normalize
		(\)) pushstr
		length exch dup length 3 -1 roll sub 
		0 exch getinterval
    } if
  } forall
	dup length
	(event.target.value = )
	dup length
	3 -1 roll add string dup
	3 -1 roll pushstr
	3 -1 roll pushstr
	pop
} def
