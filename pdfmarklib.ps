(pdfmark-prelude.ps) run
(ps2js.ps) run

% Taken from http://math.uakron.edu/~dpstory/tutorial/pdfmarks/acroform.tex

/FfReadOnly    {1 }                       def % bit  1: Read only field
/FfRequired    {1 1 bitshift }            def % bit  2: Required field (Submit)
/FfNoExport    {1 2 bitshift }            def % bit  3: Used with Submit Action
/FfMultiLine   {1 12 bitshift }           def % bit 13: For Multiline text field
/FfPassword    {1 13 bitshift }           def % bit 14: Password field
/FfNoNullState {1 14 bitshift }           def % bit 15: Used with Radio Buttons
/FfRadio       {1 15 bitshift }           def % bit 16: Radio Button Flag
/FfPushButton  {1 16 bitshift }           def % bit 17: Push Button Flag
/FfPopUpList   {1 17 bitshift }           def % bit 18: Pop up List Flag
/FfEdit        {1 18 bitshift }           def % bit 19: Edit/NoEdit
/FfSort        {1 19 bitshift }           def % bit 20: Sort List
/FfComboBox    {\FfPopUpList \FfEdit or } def % Combo = Edit PopUpList

% More, from https://www.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/pdf_reference_1-7.pdf

/FfFileSelect      {1 21 1 sub bitshift} def
/FfDoNotSpellCheck {1 23 1 sub bitshift} def
/FfDoNotScroll     {1 24 1 sub bitshift} def
/FfComb            {1 25 1 sub bitshift} def
/FfRichText        {1 26 1 sub bitshift} def


/QCenterJustified {1} def
/QRightJustified {2} def


/deepmerge { copy } def

[ /_objdef { MoonNotes } /type /stream /OBJ pdfmark
[ { MoonNotes } << /BBox [ 0 0 13 13 ] /Resources << /Font << /ZaDb { ZaDb } >> /ProcSet [ /PDF /Text ] >> >> /PUT pdfmark
[ { MoonNotes } 
  % No idea how this stream is created manually, taken from forms.pdf
  % what does the q do?
  % re is resize
  % Tf = selectfont = fontsize
  % Tm = moveto = corner maybe?
  (q 1 1 11 11 re W n BT /ZaDb 9.3262 Tf 0 g  1 0 0 1 2.9515 3.2732 Tm (l) Tj ET Q)
  /PUT pdfmark
[ { MoonNotes } /CLOSE pdfmark

[ /_objdef { MoonNotesOff } /type /stream /OBJ pdfmark
[ { MoonNotesOff } << /BBox [ 0 0 13 13 ] /Resources << /Font << /ZaDb { ZaDb } >> /ProcSet [ /PDF /Text ] >> >> /PUT pdfmark
[ { MoonNotesOff } 
  % G = darkness
  % w = width
  % re = resize, 0.5 0.5 centers it, 12 scales it by 12
  % s = draw square
  % (0 G 0 w 0.5 0.5 12 12 re s)
  % I want empty to be empty
  ()
  /PUT pdfmark
[ { MoonNotesOff } /CLOSE pdfmark

/SignaturesExist      {1 1 1 sub bitshift} def
/AppendOnly      {1 2 1 sub bitshift} def


/signature {
  % just keep enabling signatures over and over again
  [ {aform} <<
    /SigFlags SignaturesExist
    >> /PUT pdfmark
  <<
    /FT /Sig
  >> exch deepmerge 
} def


  
/circlebox {
  /BS << /S /S /W 1 >>
  /DA ( /ZaDb 0 Tf 0 g )
  /AP << /N << /Off {MoonNotesOff} /Yes {MoonNotes} >> >>
  /F 4
  /FT /Btn
  /AS /Off
  /H /P
  /MK << /BC [  0 0 0  ] /CA (n) >>
  /Subtype /Widget
} def

/textfield {
  /DA ( /Helv 0 Tf 0 g )
  /Subtype /Widget
  /FT /Tx
  /F 4
  bd
  } def

/formparent { counttomark 3 add -2 roll  % [list of checkchildren] checkparent
  exch dup 3 1 roll
  % This just sets all the children's parents
  { exch dup 3 1 roll exch [ exch << /Parent 6 -1 roll >> /PUT pdfmark } forall
  counttomark 1 add 1 roll
  % children list is still set
  <<
  /Kids counttomark 2 add -1 roll
>> deepmerge } def

/checkbox {
  /FT /Btn
  /Ff FfRadio
} def

/combtext {
  /MaxLen exch
  textfield
  /Ff FfComb % this overwrites previously set bits atm
} def

/numtext {
  /Q QRightJustified
} def

/label {
  /T exch
} def

/userlabel {
  /TU exch
} def

/fbox { % dict x y w h fbox dict
  [ 
    % x & w
    5 -1 roll dup 
    5 -1 roll add

    % y & h
    5 -1 roll dup
    6 -1 roll sub

    3 -1 roll exch
  ]

  /Rect exch
} def

/dict2pdfmark {
  { } forall
} def


/cvid {
  % There is a better way!
  % Executable arrays are just arrays with executable names inside
  % (Test) -> {Test}
  dup type /stringtype eq { cvn } if
  1 array dup 0 4 -1 roll cvx put cvx 
} def

/randid {
  rand 10 string cvs cvid
} def

/mkobj {
  % Want to prefix this if possible
  /_objdef 
  randid
  dup counttomark 1 add 1 roll
} def


% For javascript
[ /_objdef {CO} /type /array /OBJ pdfmark
[ {aform} <<
  /CO {CO}
  >> /PUT pdfmark



% Current big limitation of this is that it can't use objects that aren't
% globally resolvable already, so can't use siblings or cousins in flight. To
% get around this manually reference the tag with {squiggly braces}
/autocalc {
  pop
  % /AA << /C << /JS 6 -1 roll ps2js /S /JavaScript >> >>
} def


/unroll { % takes a primitive linked list and unrolls it: [a [b [c [...]]]] unroll [a b c ...]
  [ exch { dup null eq { pop exit } if dup 0 get counttomark 1 roll 1 get } loop ]
} def

/join { % string join! [(string) (array)] (.) join (joined.array)
  exch
  dup 0 exch { length add 1 add } forall string exch
  0 exch {
    3 -1 roll dup dup 5 3 roll
    exch dup 3 -1 roll
    dup length
    exch 3 1 roll
    add  4 1 roll
    putinterval

    dup
    3 1 roll
    5 -1 roll dup 6 1 roll
    putinterval
    1 add
  } forall
  1 sub 0 exch getinterval
  exch pop
} def


/dload {
  dup { 3 -1 roll } forall
} def

/deffield {
  exch dup
  1 array dup 0 4 -1 roll cvx put cvx
  3 -1 roll dup /_objdef 4 -1 roll put
  mark exch dload pop /ANN pdfmark
} def

/bigdict << >> def

/formfield { % you should probably always do something with the return
  % handle object reference cleaning
  dup /_objdef known not {
    dup /_objdef randid put
  } if
  dup /_objdef get 0 get cvlit
  exch

  % handle ref -> label mapping
  dup /T known {
    dup 3 2 roll dup
    bigdict exch
    4 -1 roll /T get
    2 array dup exch 0 4 -1 roll put
    put
    exch
  } if

  % handle reverse mapping the children
  dup /Kids known {
    dup /Kids get
    exch 3 1 roll
    { exch dup 3 1 roll exch
      mark exch << /Parent 5 -1 roll cvid >> /PUT pdfmark
    } forall
    exch
  } if
  % & prepend our name to children's labels
  dup dup /Kids known exch /T known and {
    dup /Kids get
    {
      0 get cvlit
      dup bigdict exch known {
        bigdict exch get
        3 -1 roll dup 4 1 roll
        bigdict exch get
        1 exch put
      } { pop } ifelse
    } forall
  } if

  % Create the object
  mark exch dload pop /ANN pdfmark
} def

% Aka parent-less, give to the root node
/orphan { % /formId orphan
  mark {afields} 3 -1 roll cvid /APPEND pdfmark
} def

% The opposite of an orphan
/parent { % [list of /childrenIds] mark .. parent
  /Kids counttomark 2 add -1 roll [ exch { cvid } forall ]
  /Subtype /Widget
} def

% % Somehow the above is created with this but I can't figure it out
% [/BBox [0 0 1.3 1.3] /_objdef {xCross} /BP pdfmark
% 0 0 1 setrgbcolor /ZapfDingbats 9.3262 selectfont 2.9515 3.2732 moveto (n) show
% [/EP pdfmark



